// File: .\domain\models\cart_item_data.dart
class CartItemData {
  CartItemData({
    required this.id,
    this.imageUrl,
    required this.title,
    required this.normalPrice,
    required this.offerPrice,
    this.quantity = 1,
  });
  final String id;
  final String? imageUrl;
  final String title;
  final double normalPrice;
  final double offerPrice;
  int quantity;

  CartItemData copyWith({int? quantity}) {
    return CartItemData(
      id: id,
      imageUrl: imageUrl,
      title: title,
      normalPrice: normalPrice,
      offerPrice: offerPrice,
      quantity: quantity ?? this.quantity,
    );
  }
}


// File: .\presentation\bloc\cart_bloc.dart
import 'package:eco_bites/features/cart/domain/models/cart_item_data.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_event.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_state.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class CartBloc extends Bloc<CartEvent, CartState> {
  CartBloc(List<CartItemData> initialItems)
      : super(CartState(items: initialItems)) {
    on<CartItemQuantityChanged>(_onCartItemQuantityChanged);
    on<CartItemRemoved>(_onCartItemRemoved);
  }

  void _onCartItemQuantityChanged(
    CartItemQuantityChanged event,
    Emitter<CartState> emit,
  ) {
    final List<CartItemData> updatedItems =
        state.items.map((CartItemData item) {
      if (item.id == event.itemId) {
        return item.copyWith(quantity: event.quantity);
      }
      return item;
    }).toList();
    emit(CartState(items: updatedItems));
  }

  void _onCartItemRemoved(CartItemRemoved event, Emitter<CartState> emit) {
    final List<CartItemData> updatedItems = state.items
        .where((CartItemData item) => item.id != event.itemId)
        .toList();
    emit(CartState(items: updatedItems));
  }
}


// File: .\presentation\bloc\cart_event.dart
import 'package:equatable/equatable.dart';

abstract class CartEvent extends Equatable {
  const CartEvent();

  @override
  List<Object?> get props => <Object>[];
}

class CartItemQuantityChanged extends CartEvent {
  const CartItemQuantityChanged(this.itemId, this.quantity);
  final String itemId;
  final int quantity;

  @override
  List<Object?> get props => <Object>[itemId, quantity];
}

class CartItemRemoved extends CartEvent {
  const CartItemRemoved(this.itemId);
  final String itemId;

  @override
  List<Object?> get props => <Object>[itemId];
}


// File: .\presentation\bloc\cart_item_bloc.dart
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_event.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_state.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class CartItemBloc extends Bloc<CartItemEvent, CartItemState> {
  CartItemBloc(int initialQuantity)
      : super(CartItemState(quantity: initialQuantity)) {
    on<QuantityChanged>(_onQuantityChanged);
  }

  void _onQuantityChanged(QuantityChanged event, Emitter<CartItemState> emit) {
    int newQuantity = state.quantity;

    switch (event.changeType) {
      case QuantityChangeType.increase:
        newQuantity++;
      case QuantityChangeType.decrease:
        newQuantity = newQuantity > 0 ? newQuantity - 1 : 0;
    }

    emit(CartItemState(quantity: newQuantity));
  }
}


// File: .\presentation\bloc\cart_item_event.dart
import 'package:equatable/equatable.dart';

enum QuantityChangeType { increase, decrease }

abstract class CartItemEvent extends Equatable {
  const CartItemEvent();

  @override
  List<Object> get props => <Object>[];
}

class QuantityChanged extends CartItemEvent {
  const QuantityChanged(this.changeType);
  final QuantityChangeType changeType;
}


// File: .\presentation\bloc\cart_item_state.dart
import 'package:equatable/equatable.dart';

class CartItemState extends Equatable {
  const CartItemState({required this.quantity});

  final int quantity;

  @override
  List<Object> get props => <Object>[quantity];
}


// File: .\presentation\bloc\cart_state.dart
import 'package:eco_bites/features/cart/domain/models/cart_item_data.dart';
import 'package:equatable/equatable.dart';

class CartState extends Equatable {
  const CartState({required this.items});
  final List<CartItemData> items;

  @override
  List<Object?> get props => <Object>[items];

  CartState copyWith({List<CartItemData>? items}) {
    return CartState(
      items: items ?? this.items,
    );
  }
}


// File: .\presentation\screens\cart_screen.dart
import 'package:eco_bites/core/ui/widgets/custom_appbar.dart';
import 'package:eco_bites/features/cart/domain/models/cart_item_data.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_bloc.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_state.dart';
import 'package:eco_bites/features/cart/presentation/widgets/cart_item.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class CartScreen extends StatelessWidget {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const CartScreenContent();
  }
}

class CartScreenContent extends StatelessWidget {
  const CartScreenContent({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(title: 'Cart'),
      body: BlocBuilder<CartBloc, CartState>(
        builder: (BuildContext context, CartState state) {
          return ListView.builder(
            itemCount: state.items.length,
            itemBuilder: (BuildContext context, int index) {
              final CartItemData item = state.items[index];
              return CartItem(
                item: item,
              );
            },
          );
        },
      ),
    );
  }
}


// File: .\presentation\widgets\cart_item.dart
import 'package:eco_bites/core/ui/widgets/basic_image.dart';
import 'package:eco_bites/core/ui/widgets/price_display.dart';
import 'package:eco_bites/features/cart/domain/models/cart_item_data.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_bloc.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_event.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_bloc.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_event.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_state.dart';
import 'package:eco_bites/features/cart/presentation/widgets/quantity_input.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:material_symbols_icons/symbols.dart';

class CartItem extends StatelessWidget {
  const CartItem({
    super.key,
    required this.item,
  });

  final CartItemData item;

  @override
  Widget build(BuildContext context) {
    return BlocProvider<CartItemBloc>(
      create: (BuildContext context) => CartItemBloc(item.quantity),
      child: _buildCartItem(context),
    );
  }

  Widget _buildCartItem(BuildContext context) {
    final ThemeData theme = Theme.of(context);

    return Card(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24),
      ),
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            BasicImage(imageUrl: item.imageUrl),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: <Widget>[
                      Expanded(
                        child: Text(
                          item.title,
                          style: theme.textTheme.titleLarge,
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      SizedBox(
                        width: 24,
                        height: 24,
                        child: IconButton(
                          icon: const Icon(Symbols.close_rounded, size: 18),
                          onPressed: () => _onDelete(context),
                          padding: EdgeInsets.zero,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  BlocBuilder<CartItemBloc, CartItemState>(
                    builder: (BuildContext context, CartItemState state) {
                      return Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: <Widget>[
                          Expanded(
                            child: PriceDisplay(
                              offerPrice: item.offerPrice * state.quantity,
                              normalPrice: item.normalPrice * state.quantity,
                            ),
                          ),
                          QuantityInput(
                            onIncrease: () => _onIncrease(context, state),
                            onDecrease: () => _onDecrease(context, state),
                          ),
                        ],
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _onIncrease(BuildContext context, CartItemState state) {
    context.read<CartItemBloc>().add(
          const QuantityChanged(QuantityChangeType.increase),
        );
    context.read<CartBloc>().add(
          CartItemQuantityChanged(item.id, state.quantity + 1),
        );
  }

  void _onDecrease(BuildContext context, CartItemState state) {
    if (state.quantity > 1) {
      context.read<CartItemBloc>().add(
            const QuantityChanged(QuantityChangeType.decrease),
          );
      context.read<CartBloc>().add(
            CartItemQuantityChanged(item.id, state.quantity - 1),
          );
    } else {
      context.read<CartBloc>().add(CartItemRemoved(item.id));
    }
  }

  void _onDelete(BuildContext context) {
    context.read<CartBloc>().add(CartItemRemoved(item.id));
  }
}


// File: .\presentation\widgets\quantity_input.dart
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_bloc.dart';
import 'package:eco_bites/features/cart/presentation/bloc/cart_item_state.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:material_symbols_icons/symbols.dart';

class QuantityInput extends StatelessWidget {
  const QuantityInput({
    super.key,
    required this.onIncrease,
    required this.onDecrease,
  });

  final VoidCallback onIncrease;
  final VoidCallback onDecrease;

  @override
  Widget build(BuildContext context) {
    return _QuantityInputContent(
      onIncrease: onIncrease,
      onDecrease: onDecrease,
    );
  }
}

class _QuantityInputContent extends StatelessWidget {
  const _QuantityInputContent({
    required this.onIncrease,
    required this.onDecrease,
  });

  final VoidCallback onIncrease;
  final VoidCallback onDecrease;

  @override
  Widget build(BuildContext context) {
    final ThemeData theme = Theme.of(context);
    return BlocBuilder<CartItemBloc, CartItemState>(
      builder: (BuildContext context, CartItemState state) {
        return SizedBox(
          height: 28,
          child: Container(
            decoration: BoxDecoration(
              border: Border.all(color: theme.colorScheme.outline),
              borderRadius: BorderRadius.circular(14),
              color: theme.colorScheme.surface,
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                _buildButton(
                  icon: state.quantity == 1
                      ? Symbols.delete_rounded
                      : Symbols.remove_rounded,
                  onPressed: onDecrease,
                  theme: theme,
                  isLeft: true,
                ),
                Container(
                  width: 28,
                  alignment: Alignment.center,
                  child: Text(
                    state.quantity.toString(),
                    style: theme.textTheme.titleMedium,
                  ),
                ),
                _buildButton(
                  icon: Symbols.add_rounded,
                  onPressed: onIncrease,
                  theme: theme,
                  isLeft: false,
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildButton({
    required IconData icon,
    required VoidCallback onPressed,
    required ThemeData theme,
    required bool isLeft,
  }) {
    return Material(
      color: theme.colorScheme.primaryContainer,
      borderRadius: BorderRadius.horizontal(
        left: isLeft ? const Radius.circular(14) : Radius.zero,
        right: !isLeft ? const Radius.circular(14) : Radius.zero,
      ),
      child: InkWell(
        onTap: onPressed,
        borderRadius: BorderRadius.horizontal(
          left: isLeft ? const Radius.circular(14) : Radius.zero,
          right: !isLeft ? const Radius.circular(14) : Radius.zero,
        ),
        child: Container(
          padding: const EdgeInsets.all(6),
          child: Icon(
            icon,
            color: theme.colorScheme.primary,
            size: 16,
          ),
        ),
      ),
    );
  }
}


